import numpy as np

# the numbers below have been obtained
# by running the scripts on the QPU

# $ ./unfolding_qubo.py -b qpu -n 5000 -l 0
# qpu_reads_unreg = np.array([
#    [5, 10, 13,  5,  3],
#    [1, 13, 12,  6,  1],
#    [10,  5, 14,  5,  3],
#    [10,  7, 15,  4,  3],
#    [0, 14, 12,  5,  3],
#    [5,  9, 13, 6,  3],
#    [6, 10, 13,  5,  4],
#    [11,  5, 14,  6,  2],
#    [0, 14, 11,  6,  3],
#    [6,  9, 13,  5,  3],
#])

# low-noise new device
qpu_reads_unreg = np.array([
    [5, 10, 12, 5, 3],
    [9, 7, 14, 5, 3],
    [7, 7, 14, 6, 2],
    [2, 12, 12, 8, 1],
    [3, 12, 11, 6, 2],
    [2, 13, 11, 6, 2],
    [1, 12, 14, 3, 3],
    [9, 7, 12, 8, 1],
    [4, 10, 13, 5, 3],
    [0, 14, 11, 6, 3],
    [7, 9, 13, 5, 3],
    [7, 8, 14, 4, 3],
    [11, 6, 15, 4, 5],
    [7, 9, 13, 4, 4],
    [4, 11, 12, 4, 4],
    [6, 9, 15, 3, 5],
    [7, 7, 15, 3, 6],
    [4, 10, 14, 4, 5],
    [2, 13, 11, 7, 1],
    [7, 7, 15, 3, 4],
])

# $ ./unfolding_qubo.py -b qpu -n 5000 -l 1
# qpu_reads_reg = np.array([
#    [6, 10, 12,  7,  0],
#    [4, 12, 11,  7,  1],
#    [7, 12, 12,  6,  3],
#    [5, 10, 12,  6,  2],
#    [5, 10, 12,  5,  2],
#    [5, 12, 11,  7,  1],
#    [4, 10, 12,  6,  2],
#    [7, 13, 12,  7,  1],
#    [7, 12, 13,  7,  2],
#    [7, 10, 12,  7,  2],
#])

qpu_reads_reg = np.array([
    [6, 12, 12, 5, 3],  # E = -5339.0
    [5, 12, 12, 6, 0],  # E = -5313.0
    [2, 10, 11, 5, 2],  # E = -5278.0
    [7, 11, 12, 6, 4],  # E = -5355.0
    [7, 9, 12, 7, 2],  # E = -5368.0
    [5, 11, 12, 8, 2],  # E = -5355.0
    [8, 10, 12, 5, 1],  # E = -5303.0
    [7, 10, 12, 7, 3],  # E = -5380.0
    [6, 12, 11, 7, 1],  # E = -5364.0
    [7, 11, 11, 8, 3],  # E = -5366.0
    [5, 11, 12, 8, 1],  # E = -5343.0
    [5, 12, 12, 7, 1],  # E = -5344.0
    [8, 12, 11, 6, 1],  # E = -5337.0
    [7, 12, 12, 6, 3],  # E = -5353.0
    [6, 11, 12, 5, 2],  # E = -5365.0
    [5, 10, 13, 7, 3],  # E = -5345.0
    [3, 12, 12, 6, 2],  # E = -5317.0
    [7, 12, 12, 5, 3],  # E = -5328.0
    [6, 9, 10, 7, 2],  # E = -5381.0
    [3, 10, 11, 6, 2],  # E = -5362.0

])

unf_data = [
    [6,  9, 13,  5,  3],  # true
    [6.67, 9.95, 12.29, 5.36, 2.13],  # IB4
    [6,  9, 13,  5,  3],  # neal
    [0, 0, 0, 0, 0],  # palceholder1
    [0, 0, 0, 0, 0]  # palceholder2
]

unf_data_unc = [
    [0., 0., 0., 0., 0],
    [3.07, 2.61, 2.40, 1.75, 1.35],  # IB4
    [0., 0., 0., 0., 0],  # neal
    [0, 0, 0, 0, 0],  # palceholder1
    [0, 0, 0, 0, 0],  # palceholder2
]

unf_data[3] = np.mean(qpu_reads_unreg, axis=0)
unf_data_unc[3] = np.std(qpu_reads_unreg, axis=0)
unf_data[4] = np.mean(qpu_reads_reg, axis=0)
unf_data_unc[4] = np.std(qpu_reads_reg, axis=0)


unf_data_labels = [
    'True value',
    'D\'Agostini ItrBayes ($N_{itr}$=4)',
    'QUBO (CPU, neal)',
    'QUBO (QPU, $\lambda$=0)',
    'QUBO (QPU, $\lambda$=1)'
]

#################
# with systeamtics

unf_data_syst = [
    [6,  9, 13,  5,  3, 1, 2],  # true
    [0.5,   1.81,  9.26, 14.94,  7.47,  0.,    0.],  # IB4
    [6,  9, 13,  5,  3,  1,  2],  # neal
    [0, 0, 0, 0, 0, 0, 0],  # QPU unreg
    [0, 0, 0, 0, 0, 0, 0],  # QPU reg
]

unf_data_syst_unc = [
    [0., 0., 0., 0., 0., 0., 0.],
    [0.36, 0.7,  1.72, 3.92, 2.95, 0.,   0.],
    [0., 0., 0., 0., 0., 0., 0.],
    [0, 0, 0, 0, 0, 0, 0],  # QPU unreg
    [0, 0, 0, 0, 0, 0, 0],  # QPU reg
]

# l=0
# qpu_reads_syst_unreg = np.array([
#    [2, 13, 11,  5,  4,  1,  2],
#    [7,  4, 15,  5,  3,  1,  1],
#    [3,  7, 13,  7,  2,  1,  1],
#    [15,  7, 14,  3,  3,  1,  3],
#    [11,  6, 14,  3,  5,  1,  2],
#    [6,  6, 10,  5,  5,  0,  1],
#    [3,  6, 13,  7,  2,  1,  1],
#    [4,  3, 10,  8,  2,  0,  0],
#    [0, 11,  7,  8,  2,  0,  1],
#    [11,  3, 13,  3,  7,  0,  1],
#])

# low-noise new device
qpu_reads_syst_unreg = np.array([
    [2, 13, 11, 5, 5, 1, 2],  # E = -3596.0
    [11, 8, 10, 5, 4, 0, 2],  # E = -3611.0
    [5, 5, 14, 6, 1, 1, 1],  # E = -3601.0
    [11, 7, 10, 5, 4, 0, 2],  # E = -3607.0
    [14, 6, 10, 4, 5, 0, 2],  # E = -3601.0
    [0, 5, 10, 7, 3, 0, 0],  # E = -3608.0
    [5, 8, 14, 5, 3, 1, 2],  # E = -3607.0
    [11, 11, 6, 9, 2, 0, 2],  # E = -3587.0
    [15, 3, 14, 5, 3, 1, 2],  # E = -3597.0
    [10, 4, 10, 7, 4, 0, 1],  # E = -3604.0
    [6, 12, 7, 9, 1, 0, 2],  # E = -3595.0
    [6, 4, 15, 5, 3, 1, 1],  # E = -3609.0
    [3, 7, 14, 5, 3, 1, 1],  # E = -3608.0
    [7, 12, 8, 5, 4, 0, 2],  # E = -3599.0
    [10, 4, 10, 7, 3, 0, 1],  # E = -3611.0
    [15, 7, 15, 3, 3, 1, 3],  # E = -3607.0
    [5, 8, 9, 7, 5, 0, 1],  # E = -3598.0
    [2, 6, 14, 6, 1, 1, 1],  # E = -3605.0
    [0, 13, 12, 6, 1, 1, 2],  # E = -3602.0
    [13, 9, 13, 4, 3, 1, 3],  # E = -3616.0
])

# l=1.0
# qpu_reads_syst_reg = np.array([
#    [2, 4, 8, 9, 3, 0, 0],
#    [2, 4, 8, 7, 4, 0, 0],
#    [4, 8, 8, 5, 3, 0, 1],
#    [3, 7, 9, 6, 3, 0, 0],
#    [5, 9, 7, 7, 7, 0, 1],
#    [1, 7, 9, 7, 3, 0, 0],
#    [2, 7, 8, 8, 2, 0, 0],
#    [5, 9, 9, 6, 1, 0, 1],
#    [1, 6, 9, 7, 5, 0, 0],
#    [4, 7, 9, 9, 5, 0, 1],
#])

qpu_reads_syst_reg = np.array([
    [1, 6, 9, 9, 3, 0, 0],  # E = -3515.0
    [5, 11, 11, 6, 2, 1, 2],  # E = -3541.0
    [7, 13, 11, 6, 1, 1, 3],  # E = -3510.0
    [4, 6, 9, 6, 4, 0, 0],  # E = -3513.0
    [5, 10, 12, 6, 3, 1, 2],  # E = -3532.0
    [6, 9, 10, 8, 2, 0, 1],  # E = -3495.0
    [9, 10, 9, 6, 5, 0, 2],  # E = -3512.0
    [3, 9, 10, 6, 4, 0, 1],  # E = -3534.0
    [7, 7, 9, 8, 3, 0, 1],  # E = -3523.0
    [4, 7, 10, 6, 3, 0, 0],  # E = -3474.0
    [3, 8, 9, 8, 5, 0, 0],  # E = -3476.0
    [7, 9, 9, 6, 4, 0, 1],  # E = -3539.0
    [5, 8, 8, 7, 3, 0, 1],  # E = -3589.0
    [7, 11, 9, 7, 3, 0, 2],  # E = -3545.0
    [7, 7, 9, 6, 2, 0, 1],  # E = -3507.0
    [7, 10, 10, 8, 1, 1, 2],  # E = -3484.0
    [3, 8, 9, 7, 5, 0, 1],  # E = -3556.0
    [9, 13, 11, 5, 2, 1, 3],  # E = -3519.0
    [3, 10, 9, 6, 3, 0, 1],  # E = -3517.0
    [3, 6, 8, 7, 5, 0, 0],  # E = -3542.0
])

unf_data_syst[3] = np.mean(qpu_reads_syst_unreg, axis=0)
unf_data_syst_unc[3] = np.std(qpu_reads_syst_unreg, axis=0)
unf_data_syst[4] = np.mean(qpu_reads_syst_reg, axis=0)
unf_data_syst_unc[4] = np.std(qpu_reads_syst_reg, axis=0)
